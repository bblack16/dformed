
module DFormed

  class Form < ElementBase
    attr_reader :fields, :title, :body

    def title= title
      @title = title.to_s
    end

    def body= body
      @body = body.to_s
    end

    def field name
      @fields.find{ |f| f.name == name } rescue nil
    end

    def add hash
      @fields.push Field.create(hash, self)
    end

    def remove index
      @fields.delete_at(index)
    end

    def values
      @fields.map{ |f| f.respond_to?(:value) ? [f.name, f.value] : nil }.reject{ |r| r.nil? }.to_h
    end

    def clear
      @fields.each{ |f| f.clear }
    end

    def field_changed field
      "Checking connections for #{field.name}..."
      @fields.each{ |f| f.check_connections field }
    end

    # These methods are only available if the engine is Opal
    if DFormed.in_opal?

      def delete
        @element.remove if element?
      end

      def to_element
        header = "<table class='fields'></table>"
        @element = Element[header]
        @fields.each do |field|
          @element.append(field.to_element)
        end
        @element
      end

      def retrieve_values
        @fields.map{ |f| f.respond_to?(:retrieve_values) ? [f.name, f.retrieve_values] : nil }.reject{ |r| r.nil? }.to_h
      end

    end

    def self.type
      :form
    end

    def type
      :form
    end

    protected

      def inner_html
        @fields.map do |field|
          field.to_html
        end.join
      end

      def setup_vars
        super
        @fields = Array.new
        @title = 'Form'
        @body = 'This is a dynamic form generated by DFormed.'
        @element_type = 'div'
      end

      def custom_init *args
        hash = args.find{ |a| a.is_a?(Hash) }
        if hash && hash.include?(:fields)
          hash[:fields].each do |field|
            add field
          end
        end
      end

      def serialize_fields
        {
          fields: { send: :fields_to_h },
          title: { send: :title },
          body: { send: :body },
          type: { send: :type }
        }
      end

      def fields_to_h
        @fields.map{ |f| f.to_h }
      end

  end

end
